#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass eskdtext
\begin_preamble
\usepackage{indentfirst}
\sloppy
\newcommand{\No}{\textnumero}

%\renewcommand{\rmdefault}{ftm} % Times New Roman

\ESKDdepartment{Министерство образования и науки республики Казахстан}
\ESKDcompany{Петропавловский колледж железнодорожного транспорта}
\ESKDclassCode{}
\ESKDunitName{ESKDunitName}
\ESKDtitleDesignedBy{Выполнил: \newline Снежко Д.В.}{ПО-41}
\ESKDtitle{Разработка системы катологизации аниме контента}
%\title{title}
%\ESKDdocName{ESKDdocName}
\ESKDsignature{   ПКЖТ.1304.002.ДП.ПЗ.008.15}
\ESKDletter{Д}{П}{}
\ESKDmaterial{ESKDmaterial}
\ESKDmass{ESKDmass}
\ESKDscale{ESKDscale}
\ESKDgroup{ПО-41}
\ESKDauthor{ESKDauthor}
\author{Снежко Д.В.}
\ESKDchecker{Черников П.П.}
%\ESKDnormContr{DnormContr}
%\ESKDapprovedBy{DapprovedBy}
%\ESKDdate{2000/02/02}
\date{2015/04/07}


%\ESKDtitle{Отчет к выполненной лабораторной работе} 
%\ESKDdocName{по дисциплине "Теоритическая информатика"}
%\ESKDsignature{Исследование метода когерентного накопления сигнала} 
%\ESKDtitleApprovedBy{профессор, д.т.н.}{фыва А.Ю.}
%\ESKDtitleDesignedBy{Выполнил: \newline студент гр. 5113}{яывпа Р.Р.}
%\ESKDdate{2011/09/25}
\end_preamble
\options floatsection, pointsection, simple, 14pt
\use_default_options true
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 0cm
\topmargin 10mm
\rightmargin 0cm
\bottommargin 0cm
\headheight 0cm
\headsep 0cm
\footskip 0cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 0 0 0 -1
\bullet 2 0 0 -1
\bullet 3 0 0 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ESKDthisStyle{title}
\end_layout

\end_inset


\end_layout

\begin_layout Part
TO DO LIST
\end_layout

\begin_layout Enumerate
Актуальность +
\end_layout

\begin_layout Enumerate
Цель дипломного проекта +/-
\end_layout

\begin_layout Enumerate
Задачи дипломного проекта
\end_layout

\begin_layout Enumerate
Практическая значимость
\end_layout

\begin_layout Enumerate
Объект исследования 
\end_layout

\begin_layout Enumerate
Характеристика вычислительной техники
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ESKDthisStyle{title}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ESKDthisStyle{formII}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Введение
\end_layout

\begin_layout Standard
Задачи каталогизации различного контента возникают повсеместно, от школьных
 библиотек до государственных документов, однако в таких программах заинтересова
ны не только крупные учреждения, но и рядовые пользователи персональных
 компьютеров, одна из таких аудиторий - фанаты аниме - жанра японской мультиплек
ации, имеющей очень большую популярность не только в Японии, откуда они
 родом, но и во всём мире, причём возростной порог уадитории колеблется
 от дошкольного до, вполне, зрелого 35-40 лет.
\end_layout

\begin_layout Standard
Как правило на счету зрителей аниме, не один десяток просмотреных мультфильмов,
 в связи с чем - возникают определённые потребности, такие как: ведение
 списка, которым можно поделиться с друзьями, или записать в него те аниме
 которые хочешь посмотреть, отмечать на какой серии остановился, а так же
 некоторые другие и разумеется, когда речь идёт не об одном десятке таких
 записей, возникает потребность иметь навигацию по этому списку, такие базовые
 вещи, как, поиск, фильтрация, добавление описания и картинки для большего
 удобства поиска и освежения воспоминаний при поиске, т.к.
 человеческий мозг наиболее эффективно работает с графической информацией,
 одного взгляда на картинку может хватить чтобы вспомнить (сюжет) аниме
 нежели просто прочитав название или вчитываясь в длинное описание.
\end_layout

\begin_layout Standard
Целью дипломного проекта является разработка программного продукта позволяющего
 каталогизировать аниме-контент, а так же связанные с ним, близкие по смыслу:
 мангу, AMV и Дорамы.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Раздел
Аналитическая часть
\end_layout

\begin_layout Подраздел
Анализ предметной области
\end_layout

\begin_layout Под-подраздел
Общая характеристика объекта исследования
\end_layout

\begin_layout Standard
Каталогизация — это совокупность методов и процессов направленных на хранение,
 упорядочевание и классификацию какой-либо информации.
 Термин «каталогизация» употреблялся уже XVI веке.
 В XIX веке каталогизация становится научной дисциплиной, имеющей несколько
 самостоятельных направлений.
\end_layout

\begin_layout Standard
Аниме — японская анимация.
 В отличие от мультфильмов других стран, предназначенных в основном для
 просмотра детьми, бо́льшая часть выпускаемого аниме рассчитана на подростковую
 и взрослую аудитории, и во многом за счёт этого имеет высокую популярность
 в мире.
\end_layout

\begin_layout Standard
Аниме отличается характерной манерой отрисовки персонажей и фонов.
 Издаётся в форме телевизионных сериалов, а также фильмов, распространяемых
 на видеоносителях или предназначенных для кинопоказа.
 Сюжеты могут описывать множество персонажей, отличаться разнообразием мест
 и эпох, жанров и стилей.
 Источниками для сюжета аниме-сериалов чаще всего являются: манга (японские
 комиксы), ранобэ (лайт-новел), или компьютерные игры (как правило, в жанре
 «визуальный роман»).
 
\end_layout

\begin_layout Standard
При экранизации обычно сохраняется графический стиль и другие особенности
 оригинала.
 Реже используются другие источники, например, произведения классической
 литературы.
 Есть также аниме, имеющие полностью оригинальный сюжет (в этом случае уже
 само аниме может послужить источником для создания по нему книжных и манга-верс
ий).
 Значение термина «аниме» может варьироваться в зависимости от контекста.
 В западных странах аниме является объектом исследования учёных-культурологов,
 социологов и антропологов — Эри Идзавы, Скотта Маклауда, Сьюзан Напьер,
 Шерон Кинселлы и других.
\end_layout

\begin_layout Под-подраздел
Организация предметной области
\end_layout

\begin_layout Standard
Предметной областью являются рядовые пользователи персональных компьютеров
\end_layout

\begin_layout Standard
Рассмотрим процесс составления списка просмотренных аниме на примере обычного,
 среднестатистического пользователя ПК с использованием текстового редактора.
\end_layout

\begin_layout Standard
Процесс добавления записей в текстовый редактор начинается с запуска самого
 редактора, последующего поиска необходимого файла в файловой системе и
 его открытия, после чего пользователю отображается список из названий аниме,
 составленный им, список не имеет структуры и никак не помогает пользователю
 искать в нём интересующее его аниме, отмечать количество просмотренных
 серий, читать описание или поделиться с другом, добавление новой записи
 является самым простым процессом.
\end_layout

\begin_layout Standard
Таким образом можно заключить что текстовый редактор является плохим вариантом
 для выполнения поставленной задачи, далее предлагается рассмотрение другой
 программы.
\end_layout

\begin_layout Standard
Рассмотрим тот же процесс на другом программном продукте, например - тебличный
 процессор.
 Примером табличных процессоров являются такие программы как: Microsoft
 Excel, LibreOffice Calc, OpenOffice Calc, Calligra Sheets и множество других
 менее популярных продуктов.
\end_layout

\begin_layout Standard
Процесс добавления записей в табличный процессор является всё тем же поиском
 файл в файловой системе и его открытия, но в подобных продуктах, уже предлагает
ся операция открытия 
\begin_inset Quotes fld
\end_inset

недавних
\begin_inset Quotes frd
\end_inset

 файлов, однако так как эти продукты рассчитаны на широкий круг задач, список
 таких файлов может быть слишком большим и не сохраняться полностью.
 После открытия файла пользователю предлагается таблица, где строка будет
 являться одной записью, а столбцы могут иметь дополнительное необходимое
 пользователю предназначение, например: год выпуска, студия, оригинальное
 название(не перевод), и прочее.
 В табличных процессорах уже имеется возможность сортировать список по тем
 или иным столбцам, что облегчает задачу поиска.
 Добавление новых записей всё так же требует самостоятельного(ручного) ввода
 всех данных, что является утомительным процессом и не исключающим ошибки
 и опечатки.
\end_layout

\begin_layout Standard
Теперь рассмотрим процесс каталогизации аниме в программе Database Anime.
\end_layout

\begin_layout Standard
Процесс работы с программой начинается с её запуска, при запуске программы,
 база данных уже будет загружена и пользователю представляется возможность
 работы с ней.
\end_layout

\begin_layout Standard
Добавление новой записи начинается с выбора необходимого раздела, если он
 ещё не выбран, при повторном использовании программы, запоминается на каком
 разделе пользователь завершил работу, после выбора раздела необходимо нажать
 на кнопку добавления новой записи, в следствие чего открывается диалоговое
 окно с предлагаемыми к заполнению полями.
 Пользователь может заполнять поля вручную, но это не самый интересный процесс,
 в программе предусмотрено автоматическое заполение данных, при наличии
 доступа к интернет, для этого требуется начать вводить название, в процессе
 его ввода пользователю предоставится выпадающий список с найденными на
 сервере записями имеющими в названии последовательность введённых пользователем
 символов, в том числе на русском языке, для выбора достаточно стрелочками
 мыши выбрать нужный пункт и нажать клавишу ввода, либо выбрать пункт мышью
 и нажать на кнопку поиска, в результате проделанных децйствий данные будут
 загружены с сервера и заполены в соответствующие поля.
\end_layout

\begin_layout Standard
Процесс навигации по каталогу является максимально простой и удобной операцией,
 список с названиями отображается в левой части главного окна.
 Сверху списка находится выпадающий список для выбора раздела, которых в
 программе несколько, а под ним список фильтров специфичных для каждого
 раздела.
 Пользователь может сортировать список по алфавиту, году выпуска либо по
 дате добавления в каталог; фильтровать его по различным предлагаемым фильтрам
 и производить поиск по названию.
 Для выбора пункта достаточно кликнуть по нему мышью, в результате чего
 в правой части окна отобразятся данные выбранной пользователем записи.
\end_layout

\begin_layout Подраздел
Анализ аналогов программного продукта
\end_layout

\begin_layout Под-подраздел
AnimeList
\end_layout

\begin_layout Standard
Аналогичным по назначению и функционалу продуктом язвляется программа AnimeList,
 первая версия которой была выпущена Владиславом Куртуков, 08.11.2011 которой
 была заброшена в 2014 году, при этом программный продукт сохранил множество
 недостатков, которые остались неисправленными, а так же спустя некоторое
 время, некоторый функционал программы, связанный с автоматическим заполнением
 контента стал неработоспособным, причиной тому послужил неправильный подход
 к данной задаче, что привело ко множеству ошибок в будущем.
\end_layout

\begin_layout Под-подраздел
Основные преимущества Database Anime
\end_layout

\begin_layout Itemize
Стабильность, программа тщательно тестируется перед выпуском версий.
 
\end_layout

\begin_layout Itemize
Open Source и свободная лицензия, пользователи могут свободно делиться программо
й с друзьями, а так же другие программисты могут принять участие в разработке
 программы и даже написать собственную программу основываясь на кодовой
 базе Database Anime, с одним лишь обязательством - она должна быть опубликована
 под той же лицензией.
 
\end_layout

\begin_layout Itemize
Кроссплатформенность, программа работает на 3х основных платформах - Windows,
 Linux, MacOS.
 {Хотя для последнего пока ещё нет официальной сборки.}
\end_layout

\begin_layout Itemize
Эргономичный дизайн и возможность его модификации благодаря настройкам программы
, пользователи могут свободно менять и настраивать его.
\end_layout

\begin_layout Itemize
Не требует нарушения политики безопасности операционной системы.
 Примером такового является запуск от имени администратора в операционных
 системах семейства Microsoft Windows.
 
\end_layout

\begin_layout Itemize
Интернационализация.
 Официально предоставляется русская и английская локализации, однако ничто
 не мешает добавить новую.
\end_layout

\begin_layout Itemize
Техническая поддержка, предоставляется на официальной странице программы
 Вконтакте.
\end_layout

\begin_layout Itemize
Имеется конвертер из экспортного формата программы AnimeList 
\end_layout

\begin_layout Itemize
Автономность.
 Для работы программы не требуется постоянное соединение с интернетом, все
 данные хранятся на локальном компьютере пользователя, что так же означает
 что пользователь может легко перенести свою БД на любой другой компьютер.
\end_layout

\begin_layout Подраздел
Структура и функционирование системы
\end_layout

\begin_layout Standard
Разрабатываемый программный продукт позволяет хранить и отображать список
 аниме, манги, AMV и дорамы в удобном виде, благодаря функциям поиска и
 фильтрации заметно упрощается навигация и поиск необходимых пользователю
 записей.
 Все данные храняться в базе данных что обеспечивает быстрый доступ даже
 при больших объемах информации.
 При работе пользователю не потребуется каждый раз заново открывать один
 и тот же файл, что упростит работу с программой.
 Каждый пользователь операционной системы имеет собственную базу данных
 и собственные настройки которые никак не конфликтуют друг-с-другом.
 В программе предусмотрено четыре раздела что осложняет работу, для решения
 этой проблемы раздел на котором пользователь завершил работу с программой
 будет автоматически открыт при её запуске что уменьшает излишние действия
 пользователя.
\end_layout

\begin_layout Подраздел
Функции разрабатываемой системы
\end_layout

\begin_layout Standard
Приложение реализует следующий функционал:
\end_layout

\begin_layout Itemize
Добавление записей - ползователи программы могут добавлять записи в один
 из четырёх разделов.
\end_layout

\begin_layout Itemize
Просмотр записей добавленных пользователем, с отображением всей информации
 об аниме.
\end_layout

\begin_layout Itemize
Редактирование записей - редактирование записей, необходимо для внесения
 пользователем изменений, таких как смена обложнки и других частей.
 Для быстрого изменения колличества просмотренных серий, во время просмотра
 конкретной записи доступно прямое изменение колличества просмотренных серий
 используя элемент отображения прогресса просмотра.
\end_layout

\begin_layout Itemize
Удаление записей - позволяет удалить запись в том случае если она по каким-либо
 причинам больше не нужна пользователю.
\end_layout

\begin_layout Itemize
Сортировка и фильтрация записей по различным критериям.
\end_layout

\begin_layout Itemize
Автоматическое заполнение записей.
 Программа предлагает пользователю функцию автоматического заполнения записей,
 подсказывая пользователю возможные варианты во время ввода названия, выбрав
 из списка необходимое пользователю название, вся информация автоматически
 будет получена с сайта и соответствующие поля будут заполнены, после чего
 пользователь может отредактировать эту информацию, например указать сколько
 серий он просмотрел и сохранить запись.
\end_layout

\begin_layout Itemize
Проверка и уведомление о выходе новой версии.
 При запуске программа проверяет наличие новых версий в официальном репозитории
 проекта и выделяет версию программы красным цветом.
 Такой подход обусловлен своей ненавязчивостью и информативностью, так как
 в разных операционных системах имеются различные подходы к обновлению программн
ого обеспечения.
\end_layout

\begin_layout Itemize
Импорт и экспорт - в программном продукте пользователю предлагаются возможности
 для экспортирования и импортирования всех своих записей в формат пригодный
 для переноса данных.
 Это может использоваться для переноса данных в другой программный продукт,
 или для того чтобы поделиться своими записями с другими пользователями,
 помимо этого это могут быть такие операции как: резервное копирование,
 распространение информации непосредственно с контентом и прочих.
\end_layout

\begin_layout Itemize
Смена дизайна приложения - благодаря возможности смены дизайна пользователи
 имеют возможность настраивать внешний вид приложения в соответствии с их
 предпочтениями, а так же делиться с друзьями своими настройками дизайна.
\end_layout

\begin_layout Itemize
Локализация - в приложении предусмотрена возможность локализации интерфейса
 программы.
\end_layout

\begin_layout Itemize
Просмотр файловой системы - указывая определённую директорию во время добавления
 записи, пользователь активирует возможность просмотра этой директории во
 время просмотра соответствующей записи, что упрощает поиск и запуск видеоматери
алов, позволяя делать это из приложения.
\end_layout

\begin_layout Itemize
Широкий спектр настроек - очень многие элементы программы пользователь имеет
 возможность настроить в соответствии с его предпочтениями.
 
\end_layout

\begin_layout Подраздел
Информационное и технологическое обоснование проекта 
\end_layout

\begin_layout Подраздел
Инструментальное обоснование проекта 
\end_layout

\begin_layout Под-подраздел
Эргономика программного обеспечения
\end_layout

\begin_layout Standard
Эргономика - Научная дисциплина, изучающая взаимодействие человека и других
 элементов системы, а также сфера деятельности по применению теории, принципов,
 данных и методов этой науки для обеспечения благополучия человека и оптимизации
 общей производительности системы.
\end_layout

\begin_layout Standard
Программный продукт должен быть разработан с учётом привычек пользователей
 и накопленного ими опыта, интерфейс программы не должен выбиваться из общего
 вида системных приложений но в то же время должен быть инновационным и
 лаконичным.
\end_layout

\begin_layout Standard
Пользователи должны иметь возможность настраивать отображение элементов
 управления программы и их размеры в соответствии с их нуждами предпочтениями,
 помимо этого пользователи должны иметь возможность смены стиля интерфейса.
\end_layout

\begin_layout Standard
В связи с тем что аниме-культура имеет широкое распространение по всему
 миру - интерфейс программы должен быть локализуемым на другие языки мира
 для охвата большей аудитории.
\end_layout

\begin_layout Standard
Помимо прочего в различных операционных системах, приссутствуют свои устоявшиеся
 нормы, такие как место на файловой сестеме, где программы хранят свои данные,
 например, для операционной системы семейства Microsoft Windows таким местом
 является 
\begin_inset Quotes fld
\end_inset

C:
\backslash
Users
\backslash
<Имя_Пользователя>
\backslash
AppData
\backslash

\begin_inset Quotes frd
\end_inset

, в то время как для дистрибутивов UNIX-подобных систем, таким местом является
 
\begin_inset Quotes fld
\end_inset

/home/<Имя_Пользователя>/.local/share/
\begin_inset Quotes frd
\end_inset

.
 Данное обстоятельство, несомненно, так же относится к эргономичности развёртыва
ния программ под различными операционными системами.
\end_layout

\begin_layout Под-подраздел
Язык программирования C++
\end_layout

\begin_layout Standard
Проект написан на языке C++, получившем широкое распространение.
\end_layout

\begin_layout Standard
C++ — компилируемый статически типизированный язык программирования общего
 назначения.
 Поддерживает такие парадигмы программирования как процедурное программирование,
 объектно-ориентированное программирование, обобщённое программирование,
 обеспечивает модульность, раздельную компиляцию, обработку исключений,
 абстракцию данных, объявление типов (классов) объектов, виртуальные функции.
 Стандартная библиотека включает, в том числе, общеупотребительные контейнеры
 и алгоритмы.
 C++ сочетает свойства как высокоуровневых, так и низкоуровневых языков.
 В сравнении с его предшественником — языком C, — наибольшее внимание уделено
 поддержке объектно-ориентированного и обобщённого программирования.
\end_layout

\begin_layout Standard
C++ широко используется для разработки программного обеспечения, являясь
 одним из самых популярных языков программирования.
 Область его применения включает создание операционных систем, разнообразных
 прикладных программ, драйверов устройств, приложений для встраиваемых систем,
 высокопроизводительных серверов, а также развлекательных приложений (игр).
 Существует множество реализаций языка C++, как бесплатных, так и коммерческих
 и для различных платформ.
 Например, на платформе x86 это GCC, Visual C++, Intel C++ Compiler, Embarcadero
 (Borland) C++ Builder и другие.
 C++ оказал огромное влияние на другие языки программирования, в первую
 очередь на Java и C#.
\end_layout

\begin_layout Standard
Синтаксис C++ унаследован от языка C.
 Одним из принципов разработки было сохранение совместимости с C.
 Тем не менее, C++ не является в строгом смысле надмножеством C; множество
 программ, которые могут одинаково успешно транслироваться как компиляторами
 C, так и компиляторами C++, довольно велико, но не включает все возможные
 программы на C.
\end_layout

\begin_layout Подраздел
Фреймворк Qt
\end_layout

\begin_layout Под-подраздел
Кросплатформенность
\end_layout

\begin_layout Standard
Фреймворк Qt является кроссплатформенным, что позволяет разрабатывать один
 программный продукт и распространять его для всех операционных систем не
 переписывая исходный код продукта.
 Для этого достаточно скомпилировать продукт под целевой платформой и собрать
 дистрибутив под эту платформу, например для операционной системы семейства
 Microsoft Windows это может быть установочный пакет .exe или .msi; для MacOS
 - .dmg; для дистрибутивов на базе ядра Linux - .deb, .rpm, .pkg и т.д.
\end_layout

\begin_layout Standard
Кроссплатформенное (межплатформенное) программное обеспечение — программное
 обеспечение, работающее более чем на одной аппаратной платформе и/или операцион
ной системе.
 Типичным примером является программное обеспечение, предназначенное для
 работы в операционных системах Linux и Windows одновременно.
\end_layout

\begin_layout Под-подраздел
Интернационализация и локализация
\end_layout

\begin_layout Standard
Фреймворк Qt предоставляет отличные средства для интернационализации продуктов,
 упрощая процесс локализации продукта ко всем языкам до простой операции
 подготовки перевода всех текстов приложения на определённый язык.
 Таким образом разрабатываемый продукт может быть переведён на всеразличные
 языки мира.
 На данный момент в наличие имеется 2 локализации: русская и английская,
 но благодаря программным решениям добавление новой локализации в продукт,
 не требует полной перекомпиляции всей программы, а сводится к добавлению
 файла с соответствующей локализацией в одно из стандартных мест на файловой
 системе, после чего соответствующая локализация может быть выбрана и установлен
а в настройках приложения.
 Благодаря такой реализации, каждый пользователь операционной системы может
 добавить и установить для себя собственную локализацию не пребегая к помощи
 системного администратора.
\end_layout

\begin_layout Standard
Интернационализа́ция — технологические приёмы разработки, упрощающие адаптацию
 продукта (такого как программное или аппаратное обеспечение) к языковым
 и культурным особенностям региона (регионов), отличного от того, в котором
 разрабатывался продукт.
 Есть важное различие между интернационализацией и локализацией.
 Интернационализация — это адаптация продукта для потенциального использования
 практически в любом месте, в то время как локализация — это добавление
 специальных функций для использования в некотором определённом регионе.
 Интернационализация производится на начальных этапах разработки, в то время
 как локализация — для каждого целевого языка.
\end_layout

\begin_layout Под-подраздел
База дынных SQLite
\end_layout

\begin_layout Standard
Для хранения данных в приложении используется популярная база дынных SQLite,
 являющаяся простым но в тоже время достаточно мощьным средством, получившим
 широкое распространение, в качестве локальных баз данных приложения, не
 требующих многопользовательских подключений.
\end_layout

\begin_layout Standard
SQLite — компактная встраиваемая реляционная база данных.
 Исходный код библиотеки передан в общественное достояние.
 В 2005 году проект получил награду Google-O’Reilly Open Source Awards.
\end_layout

\begin_layout Standard
Слово «встраиваемый» означает, что SQLite не использует парадигму клиент-сервер,
 то есть движок SQLite не является отдельно работающим процессом, с которым
 взаимодействует программа, а предоставляет библиотеку, с которой программа
 компонуется и движок становится составной частью программы.
 Таким образом, в качестве протокола обмена используются вызовы функций
 (API) библиотеки SQLite.
 Такой подход уменьшает накладные расходы, время отклика и упрощает программу.
 SQLite хранит всю базу данных (включая определения, таблицы, индексы и
 данные) в единственном стандартном файле на том компьютере, на котором
 исполняется программа.
 Простота реализации достигается за счёт того, что перед началом исполнения
 транзакции записи весь файл, хранящий базу данных, блокируется; ACID-функции
 достигаются в том числе за счёт создания файла журнала.
\end_layout

\begin_layout Standard
В частности SQLite используют такие проекты как:
\end_layout

\begin_layout Itemize
Skype;
\end_layout

\begin_layout Itemize
Mozilla Firefox;
\end_layout

\begin_layout Itemize
Android API;
\end_layout

\begin_layout Itemize
Фреймворк Qt.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Раздел
Проектная часть
\end_layout

\begin_layout Подраздел
Система контроля версий
\end_layout

\begin_layout Standard
Любая информациооная система процесс разработки которой не заканчивается
 на достижении кокого-либо конкретного результата, предполагает постоянную
 доработку и внесение изменений, иногда такие изменения могут повлечь за
 собой серьёзные изменения в кодовой базе проекта, выводящие его из функциональн
ого состояная на время разработки новых функциональных возможностей.
\end_layout

\begin_layout Standard
В связи с тем что, разработка новых функциональных возможностей программного
 продукта может продолжаться весьма продолжительное время, теряется возможность
 внесения критически важных обновлений в текущую версию продукта, исходя
 из этого становится очевидной необходимость каким-либо образом контролировать
 процесс разработки таким образом чтобы разработка новой версии продукта
 не вносила осложнений в процесс доработки текущей его версии.
\end_layout

\begin_layout Standard
Системы контроля версий предназначены, помимо всего прочего и для решения
 таких задач, они позволяют контроллировать процесс разработки программного
 продукта, имея возможность создавать контрольные точки, такие как выход
 новой версии и в последствии возможность возврата к любой из контрольных
 точек, помимо этого системы контроля версий позволяют созавать различные
 ветви разработки программы, например, основная ветвь может постоянно отражать
 рабочее состояние продукта, а отдельная ветвь для критически важных обновлений
 позволит разрабатывать их не выводя из строя основную версию, причём в
 последствии эти ветви могут синхронизироваться друг с другом таким образом
 объеденяя изменения с различных ветвей.
\end_layout

\begin_layout Standard
Так же, системы контроля версий так же позволяют вести разработку программного
 продукта нескольким разработчикам, значительно упрощая процесс разработки
 благодаря возможности синхронизации(слияния) ветвей.
 Таким образом 2 разработчика могут работать над различными частями программного
 продукта, а по завершении (объеденить/синхронизировать/слить) изменения
 из своих ветвей в главную ветвь получая новую работоспособную версию продукта.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename git-branches.png
	lyxscale 35
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Модель-ветвления"

\end_inset

Модель ветвления в Git (
\begin_inset CommandInset href
LatexCommand href
name "Оригинальная идея"
target "http://habrahabr.ru/post/106912/"

\end_inset

)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Существуют централизованные и децентрализованные системы контроля версий,
 основополагающим различием которых является расположение основного репозитория.
 В централизованных системах контроля версий существует один единственный
 репозиторий с которым работают все разработчики и все изменения отправляются
 туда, минусом такого подходя является зависимость разработчика от доступа
 к основному репозиторию, а так же проблемы при слиянии(синхронизации) ветвей,
 в централизованных системах контроля версий этот процесс абсолютно всегда
 является болезненным, напротив же в децентрализованных системах контроля
 версий, ярким представителем которых является Git, процесс слияния(синхронизаци
и) различных ветвей является обычным делом, в таких системах каждый разработчик
 имеет свою копию репозитория, с которой может распоряжаться как угодно
 и даже если он внесёт какие-либо изменения приносящие вред всему проекту
 или выходу из строя самой системы контроля версий - эти изменения окажут
 влияние только на его копию проекта, таким образом разработчик может протестиро
вать внесённые изменения на своём компьютере и убедится в их работоспособности,
 помимо того имея на руках копию репозитория он может работать из любого
 места, будь то самолёт, дача или метро не завися от наличия доступа к интернет.
\end_layout

\begin_layout Standard
Таким образом используя в своей работе систему контроля версий я имею возможност
ь, гибко работать с проектом, не боясь потерять какие-либо изменения или
 вывести из строя проект целиком, в любой момент я имею возможность вернуться
 к лююой из контрольных точек и внести изменения, которые затем с лёгкостью
 могу выполнить слияние с любой другой ветвью разработки.
 На рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Модель-ветвления"

\end_inset

 изображена модель ветвления которую я использую в процессе разработки.
\end_layout

\begin_layout Подраздел
Документирование
\end_layout

\begin_layout Standard
Важной частью любого серьёзного проекта является документация, в документации
 разработчик может и обязан зафиксировать все аспекты работы системы и отдельных
 её частей.
 Документация позволяет другим разработчикам узнать необходимую им информацию
 по интересующему их модулю системы и работе системы в целом, что облегчает
 другим разработчикам процесс вхождения в разработку проекта.
\end_layout

\begin_layout Standard
Многие хорошие проекты разработчики которых забросили их разработку и поддержку,
 из за отсутствия документации приходится переписывать с нуля, потому как
 никто не знает как устроена система и о том как взоимодействуют между собой
 её отдельные модули, благо что в последнее время о важности документации
 знают все и новые проекты разрабатываются уже с документацией, но некоторые
 даже крупные проекты не пишут толковую документацию, а делают это только
 для вида, например фремеворк FireMonkey, по которому очень трудно найти
 внятную документацию, но в некоторых проектах, например фремеворк Qt -
 документация настолько хороша что в ней можно найти ответ на любой возникающий
 вопрос, на любую мелочь, что является очень весомым плюсом данного фремеворка
 и сыграло немаловажную роль в моём престрастии к нему.
\end_layout

\begin_layout Standard
Потому как документирование является такой важной частью, в проекте задокументир
овано более половины всех классов и их методов используемых в программном
 продукте, на двух языках русском и английском языках.
\end_layout

\begin_layout Под-подраздел
Doxygen
\end_layout

\begin_layout Standard
Для документирования в проекте применяется Doxygen, так как он является
 наиболее популярным программным продуктом предназначеным для этих задач.
 На рисунке 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Пример-использования-Doxygen"

\end_inset

 представлен пример того как выглядит документация к одному из методов в
 проекте.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename doxygen.png
	lyxscale 40
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Пример-использования-Doxygen"

\end_inset

Пример использования Doxygen
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Doxygen - это кроссплатформенная система документирования исходных текстов,
 которая на сегодняшний день, по имеющему основания заявлению разработчиков,
 стала фактически стандартом для документирования программного обеспечения,
 написанного на языке C++, а также получила пусть и менее широкое распространени
е и среди ряда других языков.
\end_layout

\begin_layout Standard
Doxygen генерирует документацию на основе набора специальным образом комментиров
анных исходных текстов и также может быть настроен для извлечения структуры
 программы из недокументированных исходных кодов.
 Возможно составление графов зависимостей программных объектов, диаграмм
 классов и исходных кодов с гиперссылками.
 Результатом работы программы Doxygen является готовая документация для
 распространения и использования.
 Doxygen позволяет генерировать на основе исходного кода, содержащего комментари
и специального вида, красивую и удобную документацию, содержащую в себе
 ссылки, диаграммы классов, вызовов и т.п.
 в различных форматах: HTML, LaTeX, CHM, RTF, PostScript, PDF, man-страницы.
\end_layout

\begin_layout Standard
Doxygen используется многими проектами, в том числе KDE, Pidgin, Torque
 Game Engine, AbiWord, Mozilla, FOX toolkit, Crystal Space, Drupal.
 Есть встроенная поддержка в KDevelop.
\end_layout

\begin_layout Подраздел
Модульное тестирование
\end_layout

\begin_layout Standard
Любой современный программный продукт представляет собой сложную систему
 разбитую на некоторые отдельные модули, такое разложение системы на модули
 заложена в саму суть Объектно Ориентированного Программирования, где каждый
 класс является отдельным модулем, который так же может зависить от других
 модулей которые выполняют более мелкие его функции.
\end_layout

\begin_layout Standard
Модульное тестирование, или юнит-тестирование (англ.
 unit testing) — процесс в программировании, позволяющий проверить на корректнос
ть отдельные модули исходного кода программы.
\end_layout

\begin_layout Standard
Основаня идея модульного тестирования состоит в том, чтобы писать тесты
 для каждой нетривиальной функции или метода.
 Это позволяет достаточно быстро проверить, не привело ли очередное изменение
 кода к регрессии, то есть к появлению ошибок в уже оттестированных местах
 программы, а также облегчает обнаружение и устранение таких ошибок.
\end_layout

\begin_layout Standard
Цель модульного тестирования — изолировать отдельные части программы и показать,
 что по отдельности эти части работоспособны.
 Модульное тестирование позже позволяет программистам проводить рефакторинг,
 будучи уверенными, что модуль по-прежнему работает корректно (регрессионное
 тестирование).
 Это поощряет программистов к изменениям кода, поскольку достаточно легко
 проверить, что код работает и после изменений.
\end_layout

\begin_layout Standard
Модульное тестирование помогает устранить сомнения по поводу отдельных модулей
 и может быть использовано для подхода к тестированию «снизу вверх»: сначала
 тестируя отдельные части программы, а затем программу в целом.
\end_layout

\begin_layout Standard
Модульные тесты можно рассматривать как «живой документ» для тестируемого
 класса.
 Клиенты, которые не знают, как использовать данный класс, могут использовать
 юнит-тест в качестве примера.
\end_layout

\begin_layout Standard
Поскольку некоторые классы могут использовать другие классы, тестирование
 отдельного класса часто распространяется на связанные с ним.
 Например, класс пользуется базой данных; в ходе написания теста программист
 обнаруживает, что тесту приходится взаимодействовать с базой.
 Это ошибка, поскольку тест не должен выходить за границу класса.
 В результате разработчик абстрагируется от соединения с базой данных и
 реализует этот интерфейс, используя свой собственный mock-объект.
 Это приводит к менее связанному коду, минимизируя зависимости в системе.
\end_layout

\begin_layout Standard
В проекте применяется технология модульного тестирования, что упрощает процесс
 тестирования, увеличивет надёжность и отказоустойчивость программы, благодаря
 возможности отслеживать некорректное поведение классов сразу на этапе разработк
и, когда их исправление является наиболее простым и эффективным.
\end_layout

\begin_layout Подраздел
Качество кода
\end_layout

\begin_layout Под-подраздел
Паттёрны проектирования
\end_layout

\begin_layout Standard
Шаблон проектирования или паттерн (англ.
 design pattern) в разработке программного обеспечения — повторимая архитектурна
я конструкция, представляющая собой решение проблемы проектирования в рамках
 некоторого часто возникающего контекста.
 Обычно шаблон не является законченным образцом, который может быть прямо
 преобразован в код; это лишь пример решения задачи, который можно использовать
 в различных ситуациях.
 Объектно-ориентированные шаблоны показывают отношения и взаимодействия
 между классами или объектами, без определения того, какие конечные классы
 или объекты приложения будут использоваться.
 «Низкоуровневые» шаблоны, учитывающие специфику конкретного языка программирова
ния, называются идиомами.
 Это хорошие решения проектирования, характерные для конкретного языка или
 программной платформы, и потому не универсальные.
 На наивысшем уровне существуют архитектурные шаблоны, они охватывают собой
 архитектуру всей программной системы.
\end_layout

\begin_layout Standard
В сравнении с полностью самостоятельным проектированием, шаблоны обладают
 рядом преимуществ.
 Основная польза от использования шаблонов состоит в снижении сложности
 разработки за счёт готовых абстракций для решения целого класса проблем.
 Шаблон даёт решению свое имя, что облегчает коммуникацию между разработчиками,
 позволяя ссылаться на известные шаблоны.
 Таким образом, за счёт шаблонов производится унификация деталей решений:
 модулей, элементов проекта, — снижается количество ошибок.
 Применение шаблонов концептуально сродни использованию готовых библиотек
 кода.
 Правильно сформулированный шаблон проектирования позволяет, отыскав удачное
 решение, пользоваться им снова и снова.
 Набор шаблонов помогает разработчику выбрать возможный, наиболее подходящий
 вариант проектирования
\end_layout

\begin_layout Standard
В поекте воплощены такие шаблоны проектирования как:
\end_layout

\begin_layout Itemize
Information Expert - Обработкой информации должен заниматься тот объект,
 который владеет этой информацией;
\end_layout

\begin_layout Itemize
Creator - Создавать экземпляры объектов должен тот класс который использует
 эти объекты;
\end_layout

\begin_layout Itemize
Low Coupling - Распределить обязанности между объектами так, чтобы степень
 связанности оставалась низкой;
\end_layout

\begin_layout Itemize
Hight Cohesion - Каждый класс должен отвечать только за одну функцию;
\end_layout

\begin_layout Standard
Помимо перечисленных паттёрнов GRASP, используется множество паттёрнов GoF
\end_layout

\begin_layout Под-подраздел
UML
\end_layout

\begin_layout Standard
Для проектирования новых модулей, я применяю UML диаграммы, что позволяет
 мне спроектировать класс или систему классов, до того как я приступлю к
 кодированию.
 Такой подход позволяет спроектировать систему и понять что потребуется
 от этой системы, как будет работать и взаимодействовать с внешними системами.
 Такие дааграммы так же строятся программой Doxygen на основе имеющихся
 классов и применяются в документации, как наглядная модель иллюстрирующая
 взаимосвязь компонентов.
\end_layout

\begin_layout Standard
UML (англ.
 Unified Modeling Language — унифицированный язык моделирования) — язык
 графического описания для объектного моделирования в области разработки
 программного обеспечения.
 UML является языком широкого профиля, это — открытый стандарт, использующий
 графические обозначения для создания абстрактной модели системы, называемой
 UML-моделью.
 UML был создан для определения, визуализации, проектирования и документирования
, в основном, программных систем.
 UML не является языком программирования.
\end_layout

\begin_layout Standard
Преимущества UML
\end_layout

\begin_layout Itemize
UML объектно-ориентирован, в результате чего методы описания результатов
 анализа и проектирования семантически близки к методам программирования
 на современных объектно-ориентированных языках;
\end_layout

\begin_layout Itemize
UML позволяет описать систему практически со всех возможных точек зрения
 и разные аспекты поведения системы;
\end_layout

\begin_layout Itemize
Диаграммы UML сравнительно просты для чтения после достаточно быстрого ознакомле
ния с его синтаксисом;
\end_layout

\begin_layout Itemize
UML расширяет и позволяет вводить собственные текстовые и графические стереотипы
, что способствует его применению не только в сфере программной инженерии;
\end_layout

\begin_layout Itemize
UML получил широкое распространение и динамично развивается.
\end_layout

\begin_layout Под-подраздел
Рефакторинг
\end_layout

\begin_layout Standard
В своём проекте я регулярно провожу рефакторинг кода, так как переодические
 исправления и добавление новго функционала, {загрязняют} код и делают его
 нечитабельным, а так же довольно часто приводят к последующим ошибкам.
 Переодически проводя рефакторинг кода, я улучшаю его отдельные части, а
 так же структуру проекта в целом, что позволяет легче добавлять нововведения
 и вносить изменения в уже существующий код.
\end_layout

\begin_layout Standard
В программировании термин рефакторинг означает изменение исходного кода
 программы без изменения его внешнего поведения.
 В экстремальном программировании и других гибких методологиях рефакторинг
 является неотъемлемой частью цикла разработки ПО: разработчики попеременно
 то создают новые тесты и функциональность, то выполняют рефакторинг кода
 для улучшения его логичности и прозрачности.
 Автоматическое юнит-тестирование позволяет убедиться, что рефакторинг не
 разрушил существующую функциональность.
\end_layout

\begin_layout Standard
Иногда под рефакторингом неправильно подразумевают коррекцию кода с заранее
 оговоренными правилами отступа, перевода строк, внесения комментариев и
 прочими визуально значимыми изменениями, которые никак не отражаются на
 процессе компиляции, с целью обеспечения лучшей читаемости кода.
\end_layout

\begin_layout Standard
Рефакторинг изначально не предназначен для исправления ошибок и добавления
 новой функциональности, он вообще не меняет поведение программного обеспечения
 и это помогает избежать ошибок и облегчить добавление функциональности.
 Он выполняется для улучшения понятности кода или изменения его структуры,
 для удаления «мёртвого кода» — всё это для того, чтобы в будущем код было
 легче поддерживать и развивать.
 В частности, добавление в программу нового поведения может оказаться сложным
 с существующей структурой — в этом случае разработчик может выполнить необходим
ый рефакторинг, а уже затем добавить новую функциональность.
\end_layout

\begin_layout Standard
Это может быть перемещение поля из одного класса в другой, вынесение фрагмента
 кода из метода и превращение его в самостоятельный метод или даже перемещение
 кода по иерархии классов.
 Каждый отдельный шаг может показаться элементарным, но совокупный эффект
 таких малых изменений в состоянии радикально улучшить проект или даже предотвра
тить распад плохо спроектированной программы.
\end_layout

\begin_layout Под-подраздел
Статический анализатор кода CppCheck
\end_layout

\begin_layout Standard
Для проведения статического анализа кода, в проекте применялась утилита
 CppCheck, это довольно молодой проект статического анализа с открытым исходным
 кодом, ориентированный в первую очерень на нахождение реальных ошибок в
 коде с минимальным количеством ложнных срабатываний.
 Хотя это не самое мощьное средство, но при помощи него удалось найти уязвимость
 в проекте Xorg, которая существовала там почти 23 года, что является приемлемым
 результатом и вполне подходит для небольших проектов.
 Статический анализатор позволяет находить больше ошибок на этапе компиляции,
 что соответственно упрощает разработку и значительно повышает качество
 программного продукта.
\end_layout

\begin_layout Standard
Статический анализ кода — это технология поиска ошибок в программах путем
 разбора исходного кода и поиска в нем паттернов (шаблонов) известных ошибок.
 Эта технология реализуется специальными инструментами, называемыми статическими
 анализаторами кода.
\end_layout

\begin_layout Standard
Слово «статический» означает, что код разбирается без запуска программы
 на выполнение.
 Инструменты, которые анализируют программу во время ее работы, называются
 динамическими анализаторами кода.
\end_layout

\begin_layout Standard
Наиболее известные статические анализаторы выпускают компании Coverity,
 Klocwork, Gimpel Software.
 Популярные динамические анализаторы делают компании Intel (Intel Parallel
 Inspector) и Micro Focus (DevPartner Bounds Checker), а так же PVS-Studio.
\end_layout

\begin_layout Standard
Результат работы статического анализатора — это список обнаруженных в коде
 потенциальных проблем с указанием имени файла и конкретной строки.
 Другими словами, это список ошибок, очень похожий на тот, что выдает компилятор.
 Термин «потенциальные проблемы» используется здесь не случайно.
 К сожалению, статический анализатор не может абсолютно точно сказать, является
 ли эта потенциальная ошибка в коде реальной проблемой.
 Это может знать только программист.
\end_layout

\begin_layout Standard
Инструменты для статического анализа кода делятся по типу поддерживаемых
 языков программирования (Java, C#, C, C++), по диагностируемым проблемам
 (анализаторы общего назначения или специализированные, например, для разработки
 64-битных или параллельных программ).
\end_layout

\begin_layout Подраздел
Описание программных компонентов системы
\end_layout

\begin_layout Под-подраздел
Компоновка графических элементов в Qt
\end_layout

\begin_layout Standard
Классы компоновки виджетов (Layouts) являются одной из сильных сторон Qt.
 По сути это контейнеры, которые после изменения размеров окна автоматически
 приводят в соот- ветствие размеры и координаты виджетов, находящихся в
 нем.
 Хотя они ничего не добавляют к функциональной части самой программы, тем
 не менее, они очень важны для внешнего вида окон приложения.
 Компоновка определяет расположение различных виджетов относительно друг
 друга.
\end_layout

\begin_layout Standard
Один из недостатков ручного размещения состоит в том, что если приложение
 поддерживает несколько языков, то, поскольку слова в разных языках имеют
 разную длину, необходим механизм, который мог бы в процессе работы программы
 динамически изменять размеры и координаты виджетов, иначе части текста
 на другом языке могут оказаться "отрезанными".
 Классы компоновки библиотеки Qt выполняют эту работу.
 Более того, классы компоновки могут инвертировать направление размещения
 элементов, что может быть полезно для пишущих справа налево, например в
 Японии.
\end_layout

\begin_layout Standard
Qt предоставляет так называемые менеджеры компоновки, позволяющие организовать
 размещение виджетов на поверхности другого виджета.
 Их работа базируется на том, что каждый виджет может сообщить о том, сколько
 ему необходимо места, может ли он быть растянут по вертикали и/или горизонтали
 и т.
 д.
\end_layout

\begin_layout Itemize
Объект класса QBoxLayout может управлять как горизонтальным, так и вертикальным
 раз- мещением.
 Этот класс расширяет класс QLayout методами вставки на заданную позицию:
 виджета — insertWidget(), встроенной компоновки — insertLayout(), расстояния
 между виджета- ми — insertSpacing() и фактора растяжения — insertStretch();
\end_layout

\begin_layout Itemize
Объекты класса QHBoxLayout упорядочивают все виджеты только в горизонтальном
 порядке, слева направо.
 Его применение аналогично использованию класса QBoxLayout, но передавать
 в конструктор дополнительный параметр, задающий горизонтальный порядок
 размещения, не нужно;
\end_layout

\begin_layout Itemize
Компоновка QVBoxLayout унаследована от QBoxLayout и упорядочивает все виджеты
 только по вертикали, сверху вниз;
\end_layout

\begin_layout Itemize
Для табличного размещения используется класс QGridLayout, с помощью которого
 можно быстро создавать сложные по структуре размещения.
 Таблица состоит из ячеек, позиции которых задаются строками и столбцами;
\end_layout

\begin_layout Itemize
QSplitter - Разделители придуманы для возможности одновременного просмотра
 различных частей текстовых или графических объектов.
 В некоторых случаях применение разделителя более предпочтительно, чем размещени
е с помощью классов компоновки, т.
 к.
 появляется воз- можность изменения размеров виджетов.
 Конкретный тому пример — это всем известная программа ОС Windows "Проводник"
 (Windows Explorer).
 Разделители реализованы в клас- се QSplitter, определение которого находится
 в заголовочном файле QSplitter.
 С помощью виджета разделителя можно располагать виджеты как горизонтально,
 так и вертикально.
 Между виджетами отображается черта разделителя, которую можно двигать с
 помощью мыши, тем самым изменяя размеры виджетов.
 Если необходимо, чтобы виджеты разделителя были проинформированы об изменении
 раз- меров, то тогда нужно вызывать метод setOpaqueResize(), передав ему
 значение true.
\end_layout

\begin_layout Standard
Размещая одну компоновку в другой, можно создавать размещения практически
 любой сложности.
 Для организации вложенных размещений существует метод addLayout(), в который
 вторым параметром передается фактор растяжения для добавляемой компоновки.
\end_layout

\begin_layout Standard
Пользователь может взаимодействовать с виджетами при помощи мыши и клавиатуры.
 В последнем случае для выбора нужного виджета используется клавиша табулятора
 — <Tab>, при нажатии которой происходит переход фокуса, согласно установленному
 порядку, от одного виджета к другому.
 
\end_layout

\begin_layout Подраздел
Элементы пользовательского интерфейса
\end_layout

\begin_layout Itemize
Класс QWidget является базовым для всех объектов пользовательского интерфейса.
 Виджет - это элементарный объект пользовательского интерфейса: он получает
 события мыши, клавиатуры и другие события от оконной системы и рисует свое
 изображение на экране.
 Каждый виджет имеет прямоугольную форму, и все они отсортированы в порядке
 наложения (Z-order).
 Виджет ограничен своим родителем и другими виджетами, расположенными перед
 ним;
\end_layout

\begin_layout Itemize
Класс QFrame унаследован от класса QWidget и расширяет его возможностью
 отображения рамки.
 Этот класс является базовым для большого числа классов виджетов способных
 иметь рамку.
 Стиль рамки может быть разным, и устанавливается он с помощью метода setFrameSt
yle(), которому передаются флаги формы и флаги теней рамки.
 QFrame может также использоваться для создания простых структур занимающих
 место, но не несущих информации.
 Виджеты с рамкой имеют три атрибута описывающих толщину рамки: lineWidth,
 midLineWidth и frameWidth;
\end_layout

\begin_deeper
\begin_layout Itemize
Толщина линии - это ширина границы рамки.
 Она может быть изменена для настройки отображения рамки;
\end_layout

\begin_layout Itemize
Толщина средней линии определяет ширину дополнительной линии внутри рамки,
 которая использует третий цвет для создания трехмерного эффекта.
 Обратите внимание, что средняя линия отображается только у рамок со стилем
 Box, HLine и VLine, которые приподняты или утопленны;
\end_layout

\begin_layout Itemize
Ширина рамки определяется стилем установленным для рамки, и функция frameWidth()
 используется для получения значения определенного для данного стиля.
\end_layout

\end_deeper
\begin_layout Itemize
Виджет видовой прокрутки.
 Базовый класс для видовой прокрутки QAbstractScrollArea унаследован от
 класса QFrame и представляет собой окно для просмотра только части информации.
 Сам виджет видовой прокрутки реализует класс QScrollArea.
 Этот виджет может размещать виджеты потомков, а если хотя бы один из них
 выйдет за границы окна просмотра, то автоматически появляются вертикальная
 и/или горизонтальная полосы прокрутки.
 C их помощью можно перемещать части виджета в область просмотра;
\end_layout

\begin_layout Itemize
Виджет надписи используется для показа состояния приложения или поясняющего
 текста и представляет собой текстовое поле, текст которого не подлежит
 изменению со стороны пользователя.
 Информация, отображаемая этим виджетом, может изменяться только самим приложени
ем.
 Таким образом, приложение может сообщить пользователю о своем изменившемся
 состоянии, но пользователь не может изменить эту информацию в самом виджете.
 Класс виджета надписи QLabel определен в заголовочном файле QLabel.
 Виджет надписи унаследован от класса QFrame и может иметь рамку.
 Отображаемая им ин- формация может быть текстового, графического или анимационн
ого характера, для переда- чи которой используются слоты setText(), setPixmap()
 и setMovie().
 Класс QLabel используется для отображения текста или рисунка.
 Не поддерживает никаких функций взаимодействия с пользователем.
 Визуальное поведение QLabel может быть задано различными способами.
 QLabel может быть использована для задания мнемонических ключей для получения
 фокуса другими виджетами.
 Существует несколько способов настройки внешнего вида QLabel.
 Все настройки QFrame доступны для задания рамки виджета.
 Расположение содержимого внутри области виджета QLabel может быть отрегулирован
о с помощью setAlignment() и setIndent().
 Можно задать перенос текстового содержимого по словам с помощью setWordWrap().
 QLabel часто используется в качестве подписи интерактивного виджета.
 Для подобных случаев QLabel предоставлияет полезный механизм для добавления
 мнемонического сочетания клавиш - QKeysequence, которое при активизации
 установит фокус клавиатуры на другой виджет.
 Виджет надписи может отображать не только обычный текст, но и текстовую
 информацию в формате HTML (HyperText Markup Language, язык гипертекстовой
 разметки);
\end_layout

\begin_layout Itemize
Индикатор прогресса QProgressBar — это виджет, показывающий процесс выполнения
 операции и заполняющийся слева направо.
 Полное заполнение индикатора информирует о завершении операции.
 Этот виджет необходим в том случае, когда программа выполняет продолжительные
 действия.
 Он дает пользователю понять, что программа не зависла, а находится в работе.
 Также он показывает, сколько уже проделано и сколько еще предстоит сделать.
 Класс QProgessBar виджета индикатора прогресса определен в заголовочном
 файле QProgressBar.
 Обычно индикаторы прогресса располагаются в горизонтальном положении, но
 это можно изменить, передав в слот setOrientation() значение Qt::Vertical
 — после этого он будет расположен вертикально;
\end_layout

\begin_layout Itemize
Виджет QPushButton представляет собой командную кнопку.
 Кнопка, или командная кнопка, является наиболее часто используемым виджетом
 в любом графическом пользовательском интерфейсе.
 Нажатие (щелчок) кнопки указывает компьютеру, что необходимо выполнить
 действие или ответить на вопрос.
 Типичные кнопки - это OK, Apply (Применить), Cancel (Отменить), Close (Закрыть)
, Yes (Да), No (Нет) и Help (Справка).
 Командная кнопка, обычно, прямоугольна и отображает текстовый ярлык описывающий
 ее действие.
 Подчеркнутый символ текстового ярлыка (предваряемый в тексте амперсандом)
 указывает горячую клавишу.
 Кнопки отображают текстовую метку и, при желании, небольшую иконку, которые
 могут быть установлены в конструкторе и позднее изменены с помощью setText()
 и setIcon().
 Если кнопка недоступна, то текст и иконка будут отображаться в соответствии
 со стилем GUI чтобы показать, что кнопка "недоступна";
\end_layout

\begin_layout Itemize
Большинство программ предоставляют целый ряд настроек, позволяющих изменять
 поведение программы.
 Для этих целей полезен виджет флажка, который позволяет пользователю выбирать
 сразу несколько опций.
 Класс QCheckBox виджета кнопки флажка определен в заголовочном файле QCheckBox;
\end_layout

\begin_layout Itemize
Полоса прокрутки — это важная составляющая практически любого пользовательского
 интерфейса.
 Она интуитивно воспринимается пользователем, и с ее помощью отображаются
 текстовые или графические данные, по размерам превышающие отведенную для
 них область.
 Используя указатель текущего положения полосы прокрутки, можно перемещать
 данные в видимую область.
 Он показывает относительную позицию видимой части объекта, благодаря которой
 можно получить представление о размере самих данных.
 Класс QScrollBar является реализацией виджета полосы прокрутки.
 Он определен в заголовочном файле QscrollBar и не содержит никаких дополнительн
ых методов и сигналов, расширяющих определения класса QAbstractSlider.
 Виджет полосы прокрутки имеет минимальное и максимальное значение, текущее
 значение и ориентацию.
 Перемещение указателя текущего положения осуществляется с помощью левой
 кнопки мыши.
 В качестве альтернативы можно просто нажать на кнопки стрелок, расположенных
 на концах полосы прокрутки;
\end_layout

\begin_layout Itemize
Класс QLineEdit однострочного текстового поля определен в заголовочном файле
 QLineEdit.
 Текст, находящийся в виджете, возвращает метод text().
 Если содержимое виджета изме- нилось, то отправляется сигнал textChanged().
 Сигнал returnPressed() уведомляет о нажа- тии пользователем клавиши <Enter>.
 Вызов метода setReadOnly() с параметром true уста- навливает режим "только
 для чтения", в котором пользователь может только просматривать текст, но
 не редактировать.
 Текст для инициализации виджета можно передать в слот setText();
\end_layout

\begin_layout Itemize
Класс QPlaintTextEdit позволяет осуществлять просмотр и редактирование простого
 текста.
 Он унаследован от класса QAbstractScrollArea, что дает возможность автоматическ
и отображать полосы прокрутки, если текст не может быть полностью отображен
 в отведенной для него области;
\end_layout

\begin_layout Itemize
Виджет QSpinBox предоставляет пользователю доступ к ограниченному диапазону
 чисел.
 Все вводимые значения проверяются, для предотвращения выхода за пределы
 установленного диапазона, который устанавливается методом setRange().
 Значения можно устанавливать с помощью метода setValue(), а получать —
 методом value().
 При изменении значений посылаются сразу два сигнала valueChanged(): один
 с параметром типа int, а другой — с const QString&.
 Можно изменить способ отображения с помощью методов setPrefix() и setSuffix();
\end_layout

\begin_layout Itemize
Класс QListWidget — это виджет списка, предоставляющий пользователю возможность
 выбора одного или нескольких элементов.
 Элементы списка могут содержать текст и растровые изображения.
 Чтобы добавить элемент в список, нужно вызвать метод addItem().
 В этом методе реализовано два его варианта: для текста и для объекта класса
 QListWidgetItem.
 Если необходимо удалить все элементы из списка, то для этого нужно вызвать
 слот clear().
 Класс QListWidgetItem — это класс для элементов списка.
 Объекты этих классов могут создаваться неявно, например, при передаче текста
 в метод QListWidget::addItem().
 Следует отметить, что класс QListWidgetItem предоставляет конструктор копирован
ия, что позволяет создавать копии элементов.
 Также для этой цели можно воспользоваться методом clone();
\end_layout

\begin_layout Itemize
Класс QComboBox предоставляет пользователю возможность выбора одного элемента
 из нескольких.
 Его функциональное назначение совпадает с виджетом простого списка QListWidget.
 Основное преимущество выпадающего списка состоит в отображении только одного
 (выбранного) элемента, благодаря чему для его размещения не требуется много
 места.
 Отображение всего списка (раскрытие) происходит только на некоторый промежуток
 времени, чтобы пользователь мог сделать выбор, а затем список возвращается
 в свое исходное состояние (сворачивается).
 В качестве элемента можно добавить текст и/или картинку.
 Для этого служит метод addItem().
 Можно добавить сразу несколько текстовых элементов, передав указатель на
 объект класса QStringList в метод addItems().
 Вызвав метод setDuplicatesEnabled(false), можно включить режим, исключающий
 повторяющиеся элементы из списка.
 Если необходимо удалить все элементы выпадающего списка, тогда вызывается
 слот clear().
 Чтобы узнать, какой из элементов является текущим, нужно вызывать метод
 currentIndex(), который возвратит его порядковый номер.
 Можно сделать так, чтобы пользователь мог сам добавлять элементы в список.
 Типичным примером этого является адресная строка Проводника ОС Windows,
 содержащая в себе список просмотренных адресов (ссылок).
 Для установки виджета в этот режим вызывается метод setEditable() с параметром
 true.
 После того как пользователь изменил текст выбранного элемента, отправляется
 сигнал editTextChanged(const QString&), и новый элемент добавляется в список;
\end_layout

\begin_layout Itemize
Класс QTabWidget предоставляет набор виджетов со вкладками.
 Виджет со вкладками - это панель вкладок и "область страниц", которая используе
тся для отображения страниц, связанных с каждой из вкладок.
 По умолчанию панель вкладок отображается над областью страниц, но доступны
 различные конфигурации.
 Каждая вкладка ассоциируется с отдельным виджетом (называемым страницей).
 Только текущая страница отображается в области страниц; все другие страницы
 скрыты.
 Пользователь может отобразить отдельную страницу, щёлкнув по её вкладке
 или нажав комбинацию горячих клавиш Alt+letter, если она имеется;
\end_layout

\begin_layout Itemize
QMenuBar - класс обеспечивает горизонтальную строку меню;
\end_layout

\begin_layout Itemize
QToolBar - класс обеспечивает работу с ToolBar'ами
\end_layout

\begin_layout Itemize
Виджет QGroupBox предназначен для группировки других виджетов.
 QGroupBox обычно имеет рамку и заголовок, но может быть расширен QCheckBox
 для включения/отключения всей группы виджетов, находящихся внутри группировочно
го блока.
\end_layout

\begin_layout Itemize
QFontComboBox - виджет предназначен для выбора шрифтов и отображает все
 шрифты установленные в системе пользователя, специальным образом, с примерами
 символов из шрифтов.
\end_layout

\begin_layout Itemize
QMessageBox - класс позволяющий отображать диалоговые окна с информацией,
 которые так же могут запрашивать подтверждение на какое-либо действие у
 пользователя, либо просто уведомлять пользователя о чём-либо.
\end_layout

\begin_layout Itemize
QButtonGroup - предназначен для отображения набора действий в диалоговых
 окнах, в связи с тем что в различных операционных системах и рабочих окружениях
, применяются различные стандарты по размещению кнопок 
\begin_inset Quotes fld
\end_inset

Принять
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

Ок
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

Отмена
\begin_inset Quotes frd
\end_inset

 и прочих, виджет QButtonGroup берёт на себя обязанности по соблюдению общей
 эргономике расположения кнопок в рабочем окружении пользователя.
\end_layout

\begin_layout Под-подраздел
Собственные виджеты
\end_layout

\begin_layout Standard
В рамках дипломной работы, для приложения, в соответствии с поставленными
 целями были разработаны собственные виджеты расширяющие набор стандартных
 элементов пользовательского интерфейса и реализующие необходимый функционал.
\end_layout

\begin_layout Itemize
ImageCover - виджет наследует наиболее близкий к требуемому функционалу
 стандартный виджет QLabel и расширяет его дополнительным функционалом,
 таким как:
\end_layout

\begin_deeper
\begin_layout Itemize
Обработка технологии Drag'n'Drop, позволяющая пользователю применять перетаскива
ние картинки на виджет для установки этой картинки в качестве обложки аниме;
\end_layout

\begin_layout Itemize
Отображение картинки по умолчанию, которая позволяет пользователю понять
 что в данную область можно перетащить изображение;
\end_layout

\begin_layout Itemize
Контекстное меню, позволяющее убрать установленную ранее картинку, либо
 выбрать картинку используя системный диалог выбора картинок.
\end_layout

\end_deeper
\begin_layout Itemize
ColorPicker - элемент пользовательского интерфейса, отображающий выбранный
 пользователем цвет, нажатие левой кнопки мыши на элементе приводит к вызову
 системного диалога выбора цвета.
 По завершении выбора пользователем цвета, элемент высылает сигнал о изменении
 цвета, на этот сигнал подписан другой элемент изменяющий цветовую палитру
 приложения;
\end_layout

\begin_layout Itemize
LookProgressBar - элемент пользовательского интерфейса, предназначеный для
 отображения прогресса просмотра аниме пользователем.
 Элемент унаследован от QWidget и устанавливает внутри него три дополнительных
 виджета, две кнопки QToolButton для увеличения и уменьшения значения просмотра
 на единицу; а так же QProgressBar отображающий сам прогресс просмотра,
 вывод значения которому задан не в процентном соотношении просмотренных
 к максимальному колличеству серий, а в колличественном вида: 
\begin_inset Quotes fld
\end_inset

[10/25]
\begin_inset Quotes frd
\end_inset

, так же функционал виджета был расширен реагированием на событие прокрутки
 колёсика мыши, для повышения удобства и эффективности использования приложения,
 благодаря этому пользователь может предпочесть прокрутить колёсико мыши
 вверх или вниз над элементом увеличивая или уменьшая тем самым прогресс
 просмотра, что является наиболее быстрым и удобным действием;
\end_layout

\begin_layout Itemize
StackWidget_MouseHideOver - виджет предназначен для отображения на одном
 месте, различных элементов интерфейса.
 Виджет унаследован от QStackWidget реализующего основной необходимый функционал
 и расширяет его реагированием на наведение и 
\begin_inset Quotes fld
\end_inset

уход
\begin_inset Quotes frd
\end_inset

 мыши с элемента, переключая тем самым отображаемый виджет.
 Так же была добавлена задержка переключения, после 
\begin_inset Quotes fld
\end_inset

уходи
\begin_inset Quotes frd
\end_inset

 или наведения мыши на элемент, уменьшая тем самым колличество ложных срабатыван
ий.
 Таким образом пользхователю требуется навести и подержать курсор мыши над
 элементом для смены отображения обложки аниме на локальную директорию закреплён
ную за выбранным аниме.
\end_layout

\begin_layout Под-подраздел
Модель-представление в Qt
\end_layout

\begin_layout Standard
Qt предоставляет технологию, называемую 
\begin_inset Quotes fld
\end_inset

интервью
\begin_inset Quotes frd
\end_inset

, или, иначе, 
\begin_inset Quotes fld
\end_inset

модель-представление
\begin_inset Quotes frd
\end_inset

.
 Очень важно понимать то, что архитектура 
\begin_inset Quotes fld
\end_inset

модель-представление
\begin_inset Quotes frd
\end_inset

, реализованная в Qt, не является прямой реализацией шаблона MVC(Model View
 Controllet), а использует только основные его идеи, такие как, например,
 отделение данных от их представления.
 Применение технологии "интервью" дает следующие преимущества:
\end_layout

\begin_layout Itemize
возможность показа данных в нескольких представлениях без дублирования;
\end_layout

\begin_layout Itemize
возможность внесения изменений с минимумом временных затрат;
\end_layout

\begin_layout Itemize
удобство программного кода.
 Поскольку осуществляется разделение на данные и представление, то, если
 появится необходимость что-то дополнить или исправить, эти изменения коснутся
 лишь одной из частей.
 Остальные части вашего приложения останутся без изменений;
\end_layout

\begin_layout Itemize
удобство тестирования кода.
 Как только интерфейс задан, можно написать тест, который может быть использован
 для любой модели, реализующей этот интерфейс.
 Qt предоставляет специальную библиотеку для проведения тестов модулей;
\end_layout

\begin_layout Itemize
упрощение интеграции баз данных.
 Эта же модель применяется Qt для SQL, чтобы сделать интеграцию баз данных
 проще для программистов, не связанных с разработкой баз данных.
\end_layout

\begin_layout Standard
Концепция технологии 
\begin_inset Quotes fld
\end_inset

модель-представление
\begin_inset Quotes frd
\end_inset

, основывается на разделении задач между элементами модели:
\end_layout

\begin_layout Itemize
модель — отвечает за управление данными и предоставляет интерфейс для чтения
 и записи данных;
\end_layout

\begin_layout Itemize
представление — отвечает за представление данных пользователю и за их расположен
ие;
\end_layout

\begin_layout Itemize
выделение элемента — специальная модель, отвечающая за централизованное
 исполь- зование выделений элементов;
\end_layout

\begin_layout Itemize
делегат — отвечает за рисование каждого элемента в отдельности, а также
 за его редак- тирование.
\end_layout

\begin_layout Standard
Классы реализующие концепцию 
\begin_inset Quotes fld
\end_inset

модель-представление
\begin_inset Quotes frd
\end_inset

:
\end_layout

\begin_layout Itemize
Класс QListView — это виджет списка, предоставляющий пользователю возможность
 выбора одного или нескольких элементов.
 QListView отличается от QListWidget подходом к хранению данных, QListView
 в отичие от QListWidget не содержит в себе сами данные, а лишь предоставляет
 отображение каких-либо данных в виде списка.
 Элементы списка могут содержать текст и растровые изображения.
 Чтобы установить модель данных в список, нужно вызвать метод setModel();
\end_layout

\begin_layout Itemize
Класс QDirModel представляет собой готовый класс иерархии файловой системы.
\end_layout

\begin_layout Под-подраздел
Программные компоненты Qt
\end_layout

\begin_layout Itemize
QPalette - Цветовая палитра элементов управления - это таблица, в которой
 содержатся цвета, используемые виджетом при отображении на экране.
 Дело в том, что цвета виджетов не определены окончательно и в любой момент
 могут быть изменены передачей соответствующего цвета текста, цвета фона
 и т.
 д.
 Каждый из виджетов содержит в себе объект палитры, доступ к которому можно
 получить с помощью метода palette() класса QWidget.
 Сама палитра — это класс QPalette, который состоит из трех основных групп
 объектов.
 Эти группы определяют три возможных состояния виджета: активное (Active),
 неактивное (Inactive) и недоступное (Disabled).
 Каждая из этих групп состоит из различных цветовых ролей (color roles).
 Каждая роль имеет кисть (QBrush) и цвет (QColor);
\end_layout

\begin_layout Itemize
QApplication - берёт на себя такие задачи как: управление событиями между
 приложением и операционной системой и передачу и предоставление аргументов
 командной строки;
\end_layout

\begin_layout Itemize
QSettings - класс предоставляющий возможность работать с настройками приложения;
\end_layout

\begin_layout Itemize
QSqlQuery - класс позволяющий работать с SQL запросами;
\end_layout

\begin_layout Itemize
QSqlRecord - класс предоставляющий доступ к единице записи из SQL запроса;
\end_layout

\begin_layout Itemize
QString - класс позволяющий работать со строками;
\end_layout

\begin_layout Itemize
QVariant - класс позволяющий хранить в себе различные типы;
\end_layout

\begin_layout Itemize
QMap - ассоциативный контейнер, в котором можно хранить различные коллекции;
\end_layout

\begin_layout Itemize
QSet - контейнер для хранения коллекций.
\end_layout

\begin_layout Под-подраздел
Собственные программные компоненты
\end_layout

\begin_layout Itemize
StyleManager - класс позволяющий работать со стилями оформления приложения.
 Класс позволяет читать пользовательские и системные директории со стилями,
 состовлять список из найденых стилей, а так же сохранять стили с пользовательск
ую директорию со стилями;
\end_layout

\begin_layout Itemize
MngrQuerys - статический класс позволяющий выполнять различные SQL запросы;
\end_layout

\begin_layout Itemize
MngrConnection - класс позволяющий подключаться к базе данных, имеет методы
 для открытия и закрытия соединения с базой данных, а так же методы для
 работы с транзациями;
\end_layout

\begin_layout Itemize
DefinesPath - статический класс расширяющий QStandardPath для более удобной
 и быстрой работы с директориями в программе, а так же позволяющий централизован
но управлять/изменять эти директории.
\end_layout

\begin_layout Itemize
DbaLocalization - класс позволяющий работать с файлами локализации.
 Класс позволяет читать и состовлять список имеющихся в системе, в пользовательс
ких и системных даректориях, локализаций, а так же позволяет получить путь
 к файлу локализации по требуемому языку QLocale::Language;
\end_layout

\begin_layout Itemize
XmlDbaReader - класс позволяющий производить чтение из XML файла;
\end_layout

\begin_layout Itemize
XmlDbaWriter - класс позволяющий производить запись в XML файл;
\end_layout

\begin_layout Itemize
ShikimoriApi - Класс предоставляющий доступ к api сайта shikimori.org.
 Интерфейс взаимоидействие класса происходит посредствам сигналов и слотов
 в ответ на запрашиваемые действия класс излучает сигналы с уже распарсенными
 данными, когда они будут загружены.
 Класс имеет методы для поиска названий по 
\begin_inset Quotes fld
\end_inset

кусочку
\begin_inset Quotes frd
\end_inset

 строки, метод для получения id по полному названию и загрузку всех данных
 по определённому id.
\end_layout

\begin_layout Подраздел
Документальное описание информационной системы
\end_layout

\begin_layout Под-подраздел
Главная форма
\end_layout

\begin_layout Itemize
Кнопка добавления - позволяет пользователю добавить новую запись в выбранный
 им раздел.
 При нажатии будет открыто модальное диалоговое окно добавления для соответствую
щего раздела, где пользователь сможет ввести необходимые данные.
\end_layout

\begin_layout Itemize
Кнопка редактирование - позволяет пользователю отредактировать выбранный
 пункт из списка.
 При нажатии будет открыто модальное диалоговое окно редактирования, в котором
 будут заполенны все поля и пользователь сможет отредактировать необходимую
 ему информацию.
\end_layout

\begin_layout Itemize
Кнопка удаления - позволяет удалить выбранный пользователем пункт из списка.
 При удалении будет запрошено подтверждение удаления.
\end_layout

\begin_layout Itemize
Кнопки перехода на GitHub и vk.com - позволяют пользователю перейти в оффициальны
й репозиторий приложения и на оффициальную страницу приложения в социальной
 сети ВКонтакте соответственно, где пользователь может получить интересующую
 его информацию о ходе разработки, наличии обновлений, а так же получить
 техническую поддержку и узнать что-либо у разработчиков.
\end_layout

\begin_layout Itemize
Кнопка опций - позволяет пользователю открыть модальное диалоговое окно
 настроек приложения.
\end_layout

\begin_layout Itemize
Выпадающий список разделов - позволяет пользователю выбрать раздел из предоставл
енные в программе.
 Список может быть настроен в настройках приложения.
\end_layout

\begin_layout Itemize
Выпадающий список фильтров - позволяет пользователю отфильтровать список
 по определённым критериям, таким как: просмотренные, непросмотренные, редактиру
емые и т.п.
 Сприсок фильтров является уникальным для каждого из разделов и динамически
 меняется при выборе пользователем необходимого ему раздела.
\end_layout

\begin_layout Itemize
Поле поиска - позволяет пользователю производить поиск по выбранному разделу,
 при этом данные в списке будут динамически обновляться по мере ввода пользовате
лем поискового запроса.
 При поиске будет так же учитываться выбранный пользователем фильтр.
\end_layout

\begin_layout Itemize
Информация о прогремме, разработчиках и лицензии, отображает информацию
 о текущей версии приложения, при выходе новой версии, поле 
\begin_inset Quotes fld
\end_inset

версия
\begin_inset Quotes frd
\end_inset

 будет подсвечено красным цветом, а при наведении на него будет выдана подсказка
 о том что текущая версия приложения устарела.
\end_layout

\begin_layout Под-подраздел
Форма добавления/редактирования
\end_layout

\begin_layout Itemize
Флажок 
\begin_inset Quotes fld
\end_inset

Редактируемое
\begin_inset Quotes frd
\end_inset

 - предназначен для тех пользователей которые хотят занести аниме в список,
 но заполнить данные об аниме позже, это может быть полезно для онгоингов(аниме
 которые только начали выпускаться), в таких может быть ещё не известно
 общее колличество серий и отсутствовать рецензии.
\end_layout

\begin_layout Itemize
Кнока автоматического заполнения - позволяет автоматически получить данные
 аб аниме, название которого было введено в поле 
\begin_inset Quotes fld
\end_inset

Название
\begin_inset Quotes frd
\end_inset

.
 Все поля имеющиеся на сайте будут заполены, в том числе будет загружена
 картинка обложки для данного аниме.
\end_layout

\begin_layout Itemize
Флажок 
\begin_inset Quotes fld
\end_inset

Хочу посмотреть
\begin_inset Quotes frd
\end_inset

 - полезен если пользователь добавляет в список аниме, которое хочет посмотреть
 позже.
\end_layout

\begin_layout Itemize
Поля для ввода данных - содержат такие данные как название, альтернативное
 название, год, сезон, студия, общее колличество серий и просмотренное колличест
во серий, список жанров, описание и т.п.
 Позволяют вводить данные об аниме.
\end_layout

\begin_layout Itemize
Выпадающий список студий, содержит в себе все имеющиеся на данный момент
 студии, при необходимости пользователь может ввести название студии, отсутствую
щей в списке, вручную.
\end_layout

\begin_layout Itemize
Поле ввода URL - предназначено для ввода ссылки на какой-либо тематический
 интернет ресурс.
 В поле могут быть использованы шаблоны 
\begin_inset Quotes fld
\end_inset

%v
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

%n
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

%m
\begin_inset Quotes frd
\end_inset

 соответствующие текущей и следующей серий просматриваемых пользователем,
 а так же общему колличеству серий в аниме.
\end_layout

\begin_layout Itemize
Поля ввода количества серий - позволяют вводить численное количество серий,
 для ввода значений может быть использована клавиатура, кнопки увеличеня
 и уменьшения значения, располагающиемя справа от поля ввода а так же колёсико
 мыши.
 Значение в полях ввода количества просмотренных пользователем серий не
 могут превышать общее колличество серий в аниме.
 Такие поля выделены под 5 возможных форматов аниме - TV, OVA, ONA, Special,
 Movie.
\end_layout

\begin_layout Itemize
Виджет обложки - позволяет пользователю установить обложку для аниме, для
 чего пользователь может воспользоваться технологиеей drag'n'drop или, счёлкнув
 дважды по полю, выбрать изображение используя диалоговое окно выбора картинки.
\end_layout

\begin_layout Itemize
Кнопка сброса - позволяет пользователю очистить все поля, если пользователь
 решил что заполнил их ошибочно.
\end_layout

\begin_layout Itemize
Кнопка сохранения - позволяет сохранить введённые данные в базу данных.
 При этом текстовые данные будут сохранены в базе данных, а картинка обложки
 скопирована в рабочую директорию приложения, располагающуюся в домашнем
 каталоге пользователя.
\end_layout

\begin_layout Itemize
Кнопка отмены - позволяет пользователю отменить добавление или редактирование
 аниме и закрыть диалоговое окно.
\end_layout

\begin_layout Под-подраздел
Форма настроек
\end_layout

\begin_layout Itemize
Кнопка сброса - позволяет установить все настройки приложения в состояние
 по умолчанию.
 Может быть полезна если пользователь внёс изменения но забыл что поменял
 и не может найти нужную комбинацию опций.
\end_layout

\begin_layout Itemize
Настройка шрифтов - позволяет пользователю настраивать шрифты используемые
 в приложении в соответствии с его потребностями и предпочтениями.
\end_layout

\begin_layout Itemize
Настройка языка - позволяет пользователю выбирать язык приложения что полезно
 в тех случаях когда язык используемый системой отличается от родного языка
 пользователя и пользователь не имеет возможности изменения системного языка.
 По умолчанию, после установки приложения, будет выбран системный язык что
 избавляет пользователя от необходимости самостоятельно изменять его.
\end_layout

\begin_layout Itemize
Настройки обращения к сети - позволяют пользователю отключить некоторые
 возможности приложения требующие доступа к сети интернет, что полезно для
 пользователей с медленным подключением к сети или с кограниченным сетевым
 трафиком.
 К таким возможностям программы относится, проверка обновлений и автоматический
 поиск и заполнение данных при добавлении материала.
\end_layout

\begin_layout Itemize
Активные разделы - позволяют пользователю отключить неиспользуемые им разделы
 для достижения большего удобства в работе с приложением.
\end_layout

\begin_layout Itemize
Настройки списка - позволяют пользователю выбрать поле отображаемое в списке,
 а так же задать режим сортировки списка.
\end_layout

\begin_layout Itemize
Активный элемент - позовляет пользователю отключить функционал позволяющий
 переключаться с отображения обложки на отображение списка файлов в локальной
 директории, если это по каким-либо причинам мешает или не нужно пользователю.
\end_layout

\begin_layout Itemize
Рабочая директория - позволяет пользователю изменить рабочую директорию
 приложения, в целях безопасности и исключения возможности случайного изменения
 директории для активации возможности вносить изменения в этот подраздел,
 необходимо установить соответсвующий флажок.
\end_layout

\begin_layout Itemize
Разделы
\end_layout

\begin_deeper
\begin_layout Itemize
Раздел 
\begin_inset Quotes fld
\end_inset

Основные
\begin_inset Quotes frd
\end_inset

 - предназначен для группировки основных опций приложения имеющих отношение
 ко всем диалоговым окнам.
\end_layout

\begin_layout Itemize
Раздел 
\begin_inset Quotes fld
\end_inset

Опциональные поля
\begin_inset Quotes frd
\end_inset

 - предназначен для группировки настроек позволяющих включать и отключать
 определённые поля, предназначенные для ввода данных, в диалоговых окнах,
 предоставляя тем самым пользователю возможность отключать лишние поля,
 которые он не импользует.
\end_layout

\begin_layout Itemize
Раздел 
\begin_inset Quotes fld
\end_inset

Стили
\begin_inset Quotes frd
\end_inset

 - предназначен для настройки стилей приложения, предоставляет пользователю
 полный контроль над палитрой цветов приложения, её созранением и выбором
 из сохранённых.
 Все стили хранятся в пользовательской директории приложения и не будут
 затронуты при обновлении или переустановки приложения, а так же при переустанов
ке системы.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-Knut"

\end_inset

Кнут Д.Э.
 Искусство программирования / перевод с англ.
 Козаченко Ю.В.
 в 3-х т.
 М.: Просвещение 1997.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-Database"

\end_inset

Ульман Дж.
 Основы систем баз данных / Дж.Ульман, Д.Уидом.
 М.: Лори, 2000;
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-Qt_Shlee"

\end_inset

Шлее М.
 Qt 4.8 - Профессиональное программирование на C++, «БХВ-Петербург», 2012
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-Qt_Sammerfild"

\end_inset

Саммерфилд М.
 Qt Профессиональное программирование, разработка кросплатформенных приложений
 на C++, «Символ-Плюс», 2011
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-Ref_Fauler"

\end_inset

Фаулер М.
 Рефакторинг - Улучшение существующего кода, «Символ-Плюс», 2003
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-Pat_GoF"

\end_inset

Банда Четырёх Приёмы объектно-ориентированного проектирования, «Питер»,
 2001
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-ProGit"

\end_inset

Скотт Чакон и Бен Страуб, Pro-Git, «Apress», 2009
\end_layout

\end_body
\end_document
